model.create()==> to send data to DB

model.find()==> to get all data from DB

model.findById("654a215146de0e3adb29a2c8")

model.findByIdAndDelete("")==>delete request

node_modules.deleteOne({_id:req.params.id})==>delete request


Result {
  formatter: [Function: formatter],
  errors: [
    {
      type: 'field',
      value: 'vvv',
      msg: 'Please provide a valid email',
      path: 'email',
      location: 'body'
    },
    {
      type: 'field',
      value: '222',
      msg: 'Password must be at least 8 characters with 1 upper case letter and 1 number',
      path: 'password',
      location: 'body'
    }
  ]
}
$2b$10$M46BTvkKC4OlwXgVYhjBs.

====================================================================================
        if (data.arrValidationError) {
          console.log(data.arrValidationError);

          if (data.arrValidationError.length == 2) {
            emailError.innerText = data.arrValidationError[0].msg;
            passwordError.innerText = data.arrValidationError[1].msg;
          }

          if (data.arrValidationError.length == 1) {
            if (data.arrValidationError[0].path == "email") {
              emailError.innerText = data.arrValidationError[0].msg;
            } else {
              passwordError.innerText = data.arrValidationError[0].msg;
            }
          }
        }
================================================================
2222222222222222222222222222222222222222222222222222222222222222
const user_search_post = (req, res) => {
  var decoded = jwt.verify(req.cookies.jwt, process.env.JWT_SECRET_KEY);

  const searchText = req.body.searchText.trim();
  // AuthUser.find({
  //   $or: [
  //     { firstName: searchText },
  //     { lastName: searchText },
  //     { email: searchText },
  //     { phoneNumber: searchText },
  //     { age: searchText },
  //     { country: searchText },
  //     { gender: searchText },
  //   ],
  // })
  AuthUser.findOne({ _id: decoded.id })

    .then((result) => {
      console.log(
        "##########################Person who signed in##########################"
      );
      console.log(result.customerInfo);

      const lolo = result.customerInfo.filter((item) => {
        const myArr = [
          "firstName",
          "lastName",
          "email",
          "phoneNumber",
          "age",
          "country",
          "gender",
        ];
console.log("******************MY ARRAY************************")
        for (let i = 0; i < myArr.length; i++) {
          console.log(myArr[i])
          console.log(searchText)

        return item[myArr[i]].includes(searchText);
        }

      });
console.log("******************lolo************************")
console.log(lolo)
      res.render("user/search", { arr: lolo, moment: moment });
    })
    .catch((err) => {
      console.log(err);
    });
};

